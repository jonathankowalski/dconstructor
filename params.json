{
  "name": "Dconstructor",
  "tagline": "Dependency Injection for Lazy People",
  "body": "# Dconstructor [![Build Status](https://travis-ci.org/jonathankowalski/omg.svg?branch=master)](https://travis-ci.org/jonathankowalski/dconstructor) [![Coverage Status](https://coveralls.io/repos/github/jonathankowalski/dconstructor/badge.svg?branch=master)](https://coveralls.io/github/jonathankowalski/dconstructor?branch=master)\r\n\r\n## Dependency Injection for Lazy People\r\n### (all of us btw)\r\n\r\nEverybody likes dependency injection (and if it is not your case, you should). However dependency injection sometimes leads us to write of useless code and that, everybody hates.\r\n\r\nThe purpose of Dconstructor is to free you from certain portions of code which do not serve in much, the happiness of developers as a matter of fact.\r\n\r\nIndeed nowadays, we repeat many things, in the properties, in the signature of the constructor, in the body of the constructor. Yet to repeat it is null, time to dconstructor KISS\r\n\r\n## Without DI\r\n\r\njust take a simple example\r\n\r\n```php\r\nclass UserManager\r\n{\r\n    public function register($email){\r\n        //some code\r\n        $mailer = new Mailer();\r\n        $mailer->send($email, \"Hello !\");\r\n    }\r\n}\r\n\r\nclass Mailer\r\n{\r\n    public function send($recipient, $message)\r\n    {\r\n        //some code\r\n    }\r\n}\r\n```\r\n\r\n## Classic DI\r\n\r\n```php\r\nclass UserManager\r\n{\r\n    /**\r\n     * @var Mailer\r\n     */\r\n    private $mailer;\r\n\r\n    public function __construct(Mailer $mailer) {\r\n        $this->mailer = $mailer;\r\n    }\r\n\r\n    public function register($email){\r\n        //some code\r\n        $this->mailer->send($email, \"Hello !\");\r\n    }\r\n}\r\n\r\nclass Mailer\r\n{\r\n    public function send($recipient, $message)\r\n    {\r\n        //some code\r\n    }\r\n}\r\n```\r\n\r\n## Dconstructor\r\n\r\n```php\r\nclass UserManager\r\n{\r\n    /**\r\n     * @var Mailer\r\n     */\r\n    private $mailer;\r\n\r\n    public function register($email){\r\n        //some code\r\n        $this->mailer->send($email, \"Hello !\");\r\n    }\r\n}\r\n\r\nclass Mailer\r\n{\r\n    public function send($recipient, $message)\r\n    {\r\n        //some code\r\n    }\r\n}\r\n```\r\n\r\n## Installation\r\n\r\n```sh\r\n$ composer require dconstructor/dconstructor\r\n```\r\n\r\n\r\n## Usage\r\n\r\nDconstructor is a simple DI container use it as usual\r\n\r\n```php\r\n$container = new Container();\r\n\r\n$container->set('foo','bar');\r\n```\r\n\r\nDconstructor will make injection for you, in our example above for instantiate a new UserManager just call it\r\n\r\n```php\r\n$container = new Container();\r\n\r\n$userManager = $container->get('UserManager');\r\n```\r\n\r\n### Singleton\r\n\r\nU can choose to make a class a singleton use annotation for that.\r\n\r\n```php\r\n\r\n/**\r\n * @Singleton\r\n */\r\nclass Mailer\r\n{\r\n    //some code\r\n}\r\n\r\n$container = new Container();\r\n\r\n$mailer = $container->get('Mailer');\r\n$sameMailer = $container->get('Mailer');\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}